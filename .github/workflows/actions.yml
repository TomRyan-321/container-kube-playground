name: actions-jobs
on: workflow_dispatch

#**************************************************************************************************************
# define environment variables used throughout the workflow
# FALCON_CLIENT_ID and FALCON_CLIENT_SECRET are api credentials created in the crowdstrike console
#**************************************************************************************************************

env:
  FALCON_CLIENT_ID: ${{ secrets.FALCON_CLIENT_ID }} 
  FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
  ECR_REPO: kkuhns
  ECR_TAG: demo

jobs:
  sec-scans:
    runs-on: ubuntu-latest

#**************************************************************************************************************
# checkout the code so we have it locally on the runner
#**************************************************************************************************************

    steps:
    - name: Checkout
      uses: actions/checkout@v4

#**************************************************************************************************************
# use the crowdstrike action to scan the current repo for iac files
# output the results to a local file and upload them to the crowdstrike cloud
#**************************************************************************************************************

    - name: Run FCS IaC Scan
      uses: crowdstrike/fcs-action@v1.0.6
      id: fcs
      with:
        falcon_client_id: ${{ secrets.FALCON_CLIENT_ID }}
        falcon_region: 'us-1'
        path: '.'
        report_formats: 'sarif'
        upload_results: true
        output_path: '.'
      env:
        FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}

#**************************************************************************************************************
# fcs cli outputs to a dynamic name so lets make it static
#**************************************************************************************************************

    - name: Copy SARIF file to a static filename
      if: always()
      run: |
        cp *-scan-results.sarif scan-results.sarif


#**************************************************************************************************************
# action to upload the sarif file with findings to github
#**************************************************************************************************************

    - name: Upload SARIF report to GitHub Code scanning
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: ./scan-results.sarif

#**************************************************************************************************************
# build the image with podman
# start the podman socket so our script can connect to it
#**************************************************************************************************************

    - name: Podman build
      run: |
        podman build -t ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REPO }}:${{ env.ECR_TAG }} .
        systemctl --user enable --now podman.socket

#**************************************************************************************************************
# the following section demonstrates how to use the crowdstrike action to assess images
# navigate to the action directly to read more details
#**************************************************************************************************************

    - name: Scan Container Image with CrowdStrike action          
      continue-on-error: true
      uses: CrowdStrike/container-image-scan-action@main
      with:
        container_repository: ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REPO }}
        container_tag: ${{ env.ECR_TAG }}
        crowdstrike_region: us-1
        crowdstrike_score: 500000
        retry_count: 30
      env:
        JSON_REPORT: /tmp/report.json

    - name: Print CrowdStrike Full Image Scan Report
      continue-on-error: true
      if: always()
      run: |
        jq '.' /tmp/${{ env.ECR_REPO }}:${{ env.ECR_TAG }}.json

#**************************************************************************************************************
# the following section demonstrates how to use the python script to assess images
# the action above uses this script under the hood
# navigate to crowdstrike/container-image-scan to read more
# using the action is the recommended approach
#**************************************************************************************************************

    # - name: Scan images via CrowdStrike script
    #   continue-on-error: true
    #   run: |
    #     wget https://raw.githubusercontent.com/CrowdStrike/container-image-scan/refs/heads/main/cs_scanimage.py
    #     pip3 install podman crowdstrike-falconpy retry
    #     python3 cs_scanimage.py --repo ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REPO }} --tag ${{ env.ECR_TAG }} --cloud-region us-1 --log-level DEBUG --json-report /tmp/report.json
    #     jq '.' /tmp/${{ env.ECR_REPO }}:${{ env.ECR_TAG }}.json

# **************************************************************************************************************
# the following section demonstrates how to manually upload images
# to the crowdstrike assessment service and retreive results
# this is an alternative approach to the crowdstrike action and python script
# using the action is the recommended approach
# **************************************************************************************************************

    # - name: Tag and push the image to CrowdStrike image assessment service
    #   run: |    
    #     podman login \
    #     --username ${FALCON_CLIENT_ID} \
    #     --password ${FALCON_CLIENT_SECRET} \
    #     container-upload.us-1.crowdstrike.com

    #     podman tag ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REPO }}:${{ env.ECR_TAG }} container-upload.us-1.crowdstrike.com/${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REPO }}:${{ env.ECR_TAG }}
    #     podman push container-upload.us-1.crowdstrike.com/${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REPO }}:${{ env.ECR_TAG }}

    # - name: Retreive vulnerability report
    #   run: |
    #     RESPONSE=$(curl \
    #     --header "Content-Type: application/x-www-form-urlencoded" \
    #     --data "client_id=${FALCON_CLIENT_ID}&client_secret=${FALCON_CLIENT_SECRET}" \
    #     --request POST \
    #     --silent https://api.crowdstrike.com/oauth2/token) 

    #     CS_JWT=$(echo ${RESPONSE} | jq -r '.access_token')

    #     curl \
    #     --header "Authorization: Bearer ${CS_JWT}" \
    #     --request GET "https://container-upload.us-1.crowdstrike.com/reports?repository=${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REPO }}&tag=${{ env.ECR_TAG }}"
