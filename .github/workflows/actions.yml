name: actions-jobs

on: workflow_dispatch

env:
  FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
  FALCON_CLIENT_ID: ${{ secrets.FALCON_CLIENT_ID }} 
  ECR_REPO: kkuhns
  ECR_TAG: demo
  # CONTAINER_HOST: unix:///run/user/1000/podman/podman.sock
  
jobs:
  sec-scans:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # - name: Run FCS IaC Scan
    #   uses: crowdstrike/fcs-action@v1.0.6
    #   id: fcs
    #   with:
    #     falcon_client_id: ${{ secrets.FALCON_CLIENT_ID }}
    #     falcon_region: 'us-1'
    #     path: '.'
    #     report_formats: 'sarif'
    #     upload_results: true
    #     output_path: '.'
    #   env:
    #     FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}

    # - name: Copy SARIF file to a static filename
    #   if: always()
    #   run: |
    #     cp *-scan-results.sarif scan-results.sarif
    
    # - name: Upload SARIF report to GitHub Code scanning
    #   uses: github/codeql-action/upload-sarif@v3
    #   if: always()
    #   with:
    #     sarif_file: ./scan-results.sarif

#build the image and push it to the CrowdStrike image assessment service
    - name: Podman build tag and push
      run: |
        podman build -t ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REGISTRY }}:${{ env.ECR_TAG }} .

        
        podman login \
        --username ${FALCON_CLIENT_ID} \
        --password ${FALCON_CLIENT_SECRET} \
        container-upload.us-1.crowdstrike.com
      
        podman tag ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REGISTRY }}:${{ env.ECR_TAG }} container-upload.us-1.crowdstrike.com/${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REGISTRY }}:${{ env.ECR_TAG }}
        podman push container-upload.us-1.crowdstrike.com/${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REGISTRY }}:${{ env.ECR_TAG }}

    - name: Retreive vulnerability report
      run: |
        RESPONSE=$(curl \
        --header "Content-Type: application/x-www-form-urlencoded" \
        --data "client_id=${FALCON_CLIENT_ID}&client_secret=${FALCON_CLIENT_SECRET}" \
        --request POST \
        --silent https://api.crowdstrike.com/oauth2/token) 

        CS_JWT=$(echo ${RESPONSE} | jq -r '.access_token')

        curl \
        --header "Authorization: Bearer ${CS_JWT}" \
        --request GET "https://container-upload.us-1.crowdstrike.com/reports?repository=${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REGISTRY }}:&tag=${{ env.ECR_TAG }}"

#scan image using CrowdStrike managed Action
    # - name: Scan Container Image with CrowdStrike
    #   uses: CrowdStrike/container-image-scan-action@main
    #   with:
    #     container_repository: ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REGISTRY }}
    #     container_tag: ${{ env.ECR_TAG }}
    #     crowdstrike_region: us-1
    #     crowdstrike_score: 500000
    #     retry_count: 30
    #   env:
    #     JSON_REPORT: /tmp/report.json

    # - name: Print CrowdStrike Full Image Scan Report
    #   if: always()
    #   run: |
    #     jq '.' /tmp/report.json
