name: actions-jobs
on: workflow_dispatch

#**************************************************************************************************************
# define environment variables used throughout the workflow
# FALCON_CLIENT_ID and FALCON_CLIENT_SECRET are api credentials created in the crowdstrike console
#**************************************************************************************************************

env:
  FALCON_CLIENT_ID: ${{ secrets.FALCON_CLIENT_ID }} 
  FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
  ECR_REPO: kkuhns
  ECR_TAG: demo

jobs:
  sec-scans:
    runs-on: ubuntu-latest

#**************************************************************************************************************
# checkout the code so we have it locally on the runner
#**************************************************************************************************************

    steps:
    - name: Checkout
      uses: actions/checkout@v4

# #**************************************************************************************************************
# # use the crowdstrike action to scan the current repo for iac files
# # output the results to a local file and upload them to the crowdstrike cloud
# #**************************************************************************************************************

#     - name: Run FCS IaC Scan
#       uses: crowdstrike/fcs-action@v1.0.6
#       id: fcs
#       with:
#         falcon_client_id: ${{ secrets.FALCON_CLIENT_ID }}
#         falcon_region: 'us-1'
#         path: '.'
#         report_formats: 'sarif'
#         upload_results: true
#         output_path: '.'
#       env:
#         FALCON_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}

# #**************************************************************************************************************
# # fcs cli outputs to a dynamic name so lets make it static
# #**************************************************************************************************************

#     - name: Copy SARIF file to a static filename
#       if: always()
#       run: |
#         cp *-scan-results.sarif scan-results.sarif


#**************************************************************************************************************
# action to upload the sarif file with findings to github
#**************************************************************************************************************

    # - name: Upload SARIF report to GitHub Code scanning
    #   uses: github/codeql-action/upload-sarif@v3
    #   if: always()
    #   continue-on-error: true
    #   with:
    #     sarif_file: ./scan-results.sarif

#**************************************************************************************************************
# ensure docker isn't running
# build the image with podman
# start the podman socket so our script can connect to it
#**************************************************************************************************************

    - name: Ensure docker is not running
      run: |
        sudo systemctl stop docker.service
        sudo systemctl stop docker.socket

    - name: Podman build
      run: |
        podman build -t ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REPO }}:${{ env.ECR_TAG }} .
        systemctl --user enable --now podman.socket

#**************************************************************************************************************
# BETA TESTING - FCS CLI Image Assessment
# This section uses the new FCS CLI tool for container scanning
#**************************************************************************************************************

    - name: Configure AWS credentials for FCS CLI
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_FCS }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_FCS }}
        aws-region: us-west-2

    - name: Download FCS CLI
      run: |
        aws s3 cp s3://fcs-cli-beta-testing-kc/fcs /usr/local/bin/fcs
        chmod +x /usr/local/bin/fcs

    - name: Configure FCS CLI
      env:
        FCS_CLIENT_ID: ${{ secrets.FALCON_CLIENT_ID }}
        FCS_CLIENT_SECRET: ${{ secrets.FALCON_CLIENT_SECRET }}
        FCS_FALCON_REGION: "us-1"
      run: |
        fcs configure --client-id "$FCS_CLIENT_ID" --client-secret "$FCS_CLIENT_SECRET" --falcon-region "$FCS_FALCON_REGION"
   
    - name: Verify Podman Socket Path
      run: |
        echo "Checking Podman socket location..."
        podman info --format '{{ .Host.RemoteSocket.Path }}'
        
        # Store the socket path in an environment variable
        echo "PODMAN_SOCKET=$(podman info --format '{{ .Host.RemoteSocket.Path }}')" >> $GITHUB_ENV
        
        echo "Testing socket exists..."
        ls -la $(podman info --format '{{ .Host.RemoteSocket.Path }}')
        
        echo "Checking Podman service status..."
        systemctl --user status podman.socket
        
        echo "Listing active images..."
        podman images

    - name: Save and Scan Image
      continue-on-error: true
      run: |
        set -x  # Enable debug output
        
        # Save image to tar
        echo "Saving image to tar file..."
        podman save ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REPO }}:${{ env.ECR_TAG }} -o /tmp/image.tar
        
        # Verify tar file was created
        ls -lh /tmp/image.tar
        
        # Run scan in background and capture PID
        echo "Starting scan..."
        fcs scan image /tmp/image.tar \
          --vulnerability-severity low,medium,high,critical \
          --format json \
          --output /tmp/fcs-scan-results.json \
          --verbose \
          --source-override tar &
        
        SCAN_PID=$!
        
        # Wait for scan to complete with timeout
        TIMEOUT=300
        while [ $TIMEOUT -gt 0 ]; do
          if ! kill -0 $SCAN_PID 2>/dev/null; then
            echo "Scan completed"
            break
          fi
          echo "Waiting for scan to complete... ($TIMEOUT seconds remaining)"
          sleep 10
          TIMEOUT=$((TIMEOUT-10))
        done
        
        # Check if scan results exist
        if [ -f /tmp/fcs-scan-results.json ]; then
          echo "Scan results found:"
          jq '.' /tmp/fcs-scan-results.json
        else
          echo "No scan results found after timeout"
          exit 1
        fi


    # Keep the results checking step
    - name: Print FCS Scan Results
      if: always()
      run: |
        if [ -f /tmp/fcs-scan-results.json ]; then
          echo "Scan results file exists, showing contents:"
          jq '.' /tmp/fcs-scan-results.json
        else
          echo "Scan results file not found. Showing FCS CLI version and status:"
          fcs version
          echo "Listing tmp directory contents:"
          ls -la /tmp/
        fi

          
    # Add error checking for results file
    - name: Print FCS Scan Results
      if: always()
      run: |
        if [ -f /tmp/fcs-scan-results.json ]; then
          echo "Scan results file exists, showing contents:"
          jq '.' /tmp/fcs-scan-results.json
        else
          echo "Scan results file not found. Showing FCS CLI version and status:"
          fcs version
          echo "Listing tmp directory contents:"
          ls -la /tmp/
        fi

#**************************************************************************************************************
# the following section demonstrates how to use the crowdstrike action to assess images
# navigate to the action directly to read more details
#**************************************************************************************************************

    # - name: Scan Container Image with CrowdStrike action          
    #   continue-on-error: true
    #   uses: CrowdStrike/container-image-scan-action@main
    #   with:
    #     container_repository: ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REPO }}
    #     container_tag: ${{ env.ECR_TAG }}
    #     crowdstrike_region: us-1
    #     crowdstrike_score: 500000
    #     retry_count: 30
    #   env:
    #     JSON_REPORT: /tmp/report.json
  
    # - name: Print CrowdStrike Full Image Scan Report
    #   continue-on-error: true
    #   if: always()
    #   run: |
    #     jq '.' /tmp/${{ env.ECR_REPO }}:${{ env.ECR_TAG }}.json

#**************************************************************************************************************
# the following section demonstrates how to use the python script to assess images
# the action above uses this script under the hood
# navigate to crowdstrike/container-image-scan to read more
# using the action is the recommended approach
#**************************************************************************************************************

    # - name: Scan images via CrowdStrike script
    #   continue-on-error: true
    #   run: |
    #     wget https://raw.githubusercontent.com/CrowdStrike/container-image-scan/refs/heads/main/cs_scanimage.py
    #     pip3 install podman crowdstrike-falconpy retry
    #     python3 cs_scanimage.py --repo ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REPO }} --tag ${{ env.ECR_TAG }} --cloud-region us-1 --json-report /tmp/report.json
    #     jq '.' /tmp/${{ env.ECR_REPO }}:${{ env.ECR_TAG }}.json

# **************************************************************************************************************
# the following section demonstrates how to manually upload images
# to the crowdstrike assessment service and retreive results
# this is an alternative approach to the crowdstrike action and python script
# using the action is the recommended approach
# **************************************************************************************************************

    # - name: Tag and push the image to CrowdStrike image assessment service
    #   run: |    
    #     podman login \
    #     --username ${FALCON_CLIENT_ID} \
    #     --password ${FALCON_CLIENT_SECRET} \
    #     container-upload.us-1.crowdstrike.com

    #     podman tag ${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REPO }}:${{ env.ECR_TAG }} container-upload.us-1.crowdstrike.com/${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REPO }}:${{ env.ECR_TAG }}
    #     podman push container-upload.us-1.crowdstrike.com/${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REPO }}:${{ env.ECR_TAG }}

    # - name: Retreive vulnerability report
    #   run: |
    #     RESPONSE=$(curl \
    #     --header "Content-Type: application/x-www-form-urlencoded" \
    #     --data "client_id=${FALCON_CLIENT_ID}&client_secret=${FALCON_CLIENT_SECRET}" \
    #     --request POST \
    #     --silent https://api.crowdstrike.com/oauth2/token) 

    #     CS_JWT=$(echo ${RESPONSE} | jq -r '.access_token')

    #     curl \
    #     --header "Authorization: Bearer ${CS_JWT}" \
    #     --request GET "https://container-upload.us-1.crowdstrike.com/reports?repository=${{ secrets.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-2.amazonaws.com/${{ env.ECR_REPO }}&tag=${{ env.ECR_TAG }}"
